
//

apply plugin: 'java'
apply plugin: 'maven-publish'
apply plugin: 'signing'

sourceCompatibility = 1.8
targetCompatibility = 1.8

sourceSets {
    main {
        java {
            srcDir 'src'
        }
    }
}
tasks.withType(JavaCompile) {
    options.fork = true
    options.debug = true
}

repositories {
  mavenCentral()
}

def jarName = "topseed4j.jar"
def vversion =  'v1.01.22x'

task cleanUp() {
  println 'clean build'
  delete './release/'+jarName
}
//zip up jars
task zipJars(dependsOn: cleanUp)  {
    doLast {
        ant.zip(destfile: './release/'+jarName) {
            zipgroupfileset(dir: './libs')
            zipgroupfileset(dir: './build/libs')
        }
        println 'zip'
    }
}

task buildJar(type: GradleBuild) {
     tasks = ['compileJava', 'jar', 'zipJars']
}
defaultTasks  'buildJar'

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    }

jar { // modify release
    manifest {
        attributes(
                   'Implementation-Version': vversion
    )}
}

def releaseJar = file('release/'+jarName)
artifacts {
  archives releaseJar
}


///// release to maven: //////////////////////////////////////////////

signing {
  sign configurations.archives
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            customizePom(pom)
            groupId 'com.github.appthings'
            artifactId 'topseed4j'
            version vversion

            from components.java


      // create the sign pom artifact
            pom.withXml {
                def pomFile = file("${project.buildDir}/generated-pom.xml")
                writeTo(pomFile)
                def pomAscFile = signing.sign(pomFile).signatureFiles[0]
                artifact(pomAscFile) {
                    classifier = null
                    extension = 'pom.asc'
                }
            }

      // create the signed artifacts
            project.tasks.signArchives.signatureFiles.each {
                artifact(it) {
                    def matcher = it.file =~ /-(sources|javadoc)\.jar\.asc$/
                    if (matcher.find()) {
                        classifier = matcher.group(1)
                    } else {
                        classifier = null
                    }
                    extension = 'jar.asc'
                }
            }

        }
    }

    repositories {
        maven {
            url "https://oss.sonatype.org/service/local/staging/deploy/maven2"
            credentials {
                username sonatypeUsername
                password sonatypePassword
            }
        }

    }
}


def customizePom(pom) {
    pom.withXml {
        def root = asNode()

        // eliminate test-scoped dependencies (no need in maven central POMs)
        root.dependencies.removeAll { dep ->
            dep.scope == "test"
        }

        // add all items necessary for maven central publication
        root.children().last() + {
            resolveStrategy = Closure.DELEGATE_FIRST

            description 'topseed4j'
            name 'topseed4j'
            url 'https://github.com/appthings/topseed4j'
            organization {
                name 'com.github.appthings'
                url 'https://github.com/appthings/topseed4j'
            }
            issueManagement {
                system 'GitHub'
                url 'https://github.com/mautini/schemaorg-java/issues'
            }
            licenses {
                license {
                    name 'Apache License 2.0'
                    url 'https://github.com/mautini/schemaorg-java/blob/master/LICENSE'
                    distribution 'repo'
                }
            }
            scm {
                url 'https://github.com/appthings/topseed4j'
                connection 'scm:git:git://github.com/appthings/topseed4j.git'
                developerConnection 'scm:git:ssh://git@github.com:appthings/topseed4j.git'
            }
            developers {
                developer {
                    name 'several'
                }
            }
        }

    }
}


model {
  tasks.signArchives {
        dependsOn project.tasks.buildJar
    }
    tasks.generatePomFileForMavenJavaPublication {
        dependsOn project.tasks.copyJarBack
        destination = file("${project.buildDir}/generated-pom.xml")
    }
    tasks.publishMavenJavaPublicationToMavenLocal {
        dependsOn project.tasks.generatePomFileForMavenJavaPublication
    }
    tasks.publishMavenJavaPublicationToMavenRepository {
        dependsOn project.tasks.generatePomFileForMavenJavaPublication
    }

}

task copyJarBack(dependsOn: signArchives ) {
    println 'copy?'
	doLast {
		copy {
	        from './release/'+jarName
	        into './build/libs/'
	    }
	}
    println 'copied!!'
    
}//copy



